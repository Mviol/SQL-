--O PostGIS disponibiliza o tipo de dado GEOMETRY que nos permite especificar atributos com esse tipo de dado em tabelas relacionais
--GEOMETRY é o tipo de dado espacial "genérico" e que pode ser especializado de acordo com a hierarquia de tipos da OGC

--exemplo criação de uma tabela com o GEOMETRY
CREATE TABLE geometrias (
	id INT GENERATED ALWAYS AS IDENTITY, -- mais info sobre esse tipo de sequência em https://www.postgresqltutorial.com/postgresql-identity-column/
	nome VARCHAR,
	geom GEOMETRY,
	CONSTRAINT geometrias_id_pk PRIMARY KEY(id)
);

--o atributo geom vai aceitar pontos, linhas e polígonos, sejam simples ou complexos
--é possível restringir que o atributo geométrico aceite apenas um determinado tipo de dado espacial

-- por exemplo, vamos fazer uma tabela para armazenar a localização de postes
CREATE TABLE poste (
	id INT GENERATED ALWAYS AS IDENTITY, 
	localizacao GEOMETRY(POINT), --uma constraint de nível de tipo de dado
	descricao VARCHAR,
	CONSTRAINT poste_id_pk PRIMARY KEY(id)
);

--outro exemplo, uma tabela que armazena ruas de uma cidade
CREATE TABLE rua (
	id INT GENERATED ALWAYS AS IDENTITY, 
	extensao GEOMETRY(MULTILINESTRING), -- porque multilinestring? será que linestring não seria suficiente?
	nome VARCHAR,
	CONSTRAINT rua_id_pk PRIMARY KEY(id)
);

--terceiro exemplo, uma tabela que armazena fazendas
CREATE TABLE fazenda (
	id INT GENERATED ALWAYS AS IDENTITY, 
	regiao GEOMETRY(POLYGON, 4326), --aceita apenas polígonos simples com SRID 4326. Qual seria a limitação de usar POLYGON aqui?
	nome VARCHAR,
	descricao VARCHAR,
	CONSTRAINT fazenda_id_pk PRIMARY KEY(id)
);

--vamos adicionar algumas linhas em nossas tabelas

INSERT INTO geometrias(nome, geom) VALUES ('um ponto simples', 'POINT(0 0)');
INSERT INTO geometrias(nome, geom) VALUES ('uma linha simples', 'LINESTRING(30 10, 10 30, 40 40)');
INSERT INTO geometrias(nome, geom) VALUES ('uma região/polígono simples', 'POLYGON((30 10, 10 30, 40 40))'); --Atenção aqui
INSERT INTO geometrias(nome, geom) VALUES ('uma região/polígono simples', 'POLYGON((30 10, 10 30, 40 40, 30 10))'); 

INSERT INTO geometrias(nome, geom) VALUES ('uma região/polígono simples com buraco', 'POLYGON((35 10, 45 45, 15 40, 10 20, 35 10), (20 30, 35 35, 30 20, 20 30))'); 

INSERT INTO geometrias(nome, geom) VALUES ('um ponto complexo', 'MULTIPOINT(0 1, 1 3, 4 4)');
INSERT INTO geometrias(nome, geom) VALUES ('uma linha complexa', 'MULTILINESTRING((30 10, 10 30, 40 40), (0 0, 10 10, 10 30))');
INSERT INTO geometrias(nome, geom) VALUES ('uma região/polígono complexa', 'MULTIPOLYGON(((30 20, 45 40, 10 40, 30 20)),((15 5, 40 10, 10 20, 5 10, 15 5)))');
INSERT INTO geometrias(nome, geom) VALUES ('uma região/polígono complexa', 'MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)),((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),(30 20, 20 15, 20 25, 30 20)))');

INSERT INTO geometrias(nome, geom) VALUES ('uma coleção de geometrias', 'GEOMETRYCOLLECTION (POINT (40 10),
										   LINESTRING (10 10, 20 20, 10 40),
										   POLYGON ((40 40, 20 45, 45 30, 40 40)))');

--muitas vezes, a representação WKT é automaticamente convertida para a representação interna (a que o PostGIS efetivamente manipula)
--caso isso não ocorrer, pode-se usar o operador :: para realizar essa conversão de maneira forçada
--será útil ao realizar operações sobre os objetos espaciais
-- isso somente se aplica a representação WKT e EWKT pois é tipo de input padrão do PostGIS

INSERT INTO geometrias(nome, geom) VALUES ('um ponto simples', 'POINT(34 30)'::geometry);

--(tentando) inserir dados em outras tabelas

INSERT INTO poste(localizacao, descricao) VALUES ('POINT(30 56)', 'poste amarelo');
INSERT INTO poste(localizacao, descricao) VALUES ('LINESTRING(30 56, 50 60)', 'poste diferente');

INSERT INTO fazenda(regiao, nome, descricao) VALUES ('POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))', 'fazenda da luz', 'receita bruta alta'); --(?)
INSERT INTO fazenda(regiao, nome, descricao) VALUES ('SRID=4326;POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))', 'fazenda da luz', 'receita bruta alta'); --(?)

-- treine com as outras tabelas as inserções permitidas e não permitidas

-- recuperando os dados inseridos

SELECT * FROM geometrias; --o output padrão do PostGIS usa a representação WKB

SELECT * FROM geometrias WHERE geometrytype(geom) = 'POINT'; --geometrytype retorna o tipo de dado espacial de um objeto
SELECT * FROM geometrias WHERE geometrytype(geom) = 'LINESTRING';
SELECT * FROM geometrias WHERE geometrytype(geom) = 'POLYGON';

SELECT * FROM geometrias WHERE geometrytype(geom) = 'MULTIPOINT'; 
SELECT * FROM geometrias WHERE geometrytype(geom) = 'MULTILINESTRING';
SELECT * FROM geometrias WHERE geometrytype(geom) = 'MULTIPOLYGON';

--Funções de entrada/saída (input/output) do PostGIS usando as representações vistas

--INPUT
--ST_GeomFromEWKT — converte um objeto na forma EWKT para a representação interna do PostGIS.
--ST_GeomFromText — converte um objeto na forma WKT para a representação interna do PostGIS.
--ST_GeomFromGML — converte um objeto na forma GML para a representação interna do PostGIS.
--ST_GeomFromGeoJSON — converte um objeto na forma GeoJSON para a representação interna do PostGIS.
--ST_GeomFromKML — converte um objeto na forma KML para a representação interna do PostGIS.
--ST_GeomFromEWKB — converte um objeto na forma EWKB para a representação interna do PostGIS.
--ST_GeomFromWKB — converte um objeto na forma WKB para a representação interna do PostGIS.

--OUTPUT

--ST_AsEWKT — retorna a representação EWKT de um objeto espacial.
--ST_AsText — retorna a representação WKT de um objeto espacial.
--ST_AsGeoJSON — retorna a representação GeoJSON de um objeto espacial.
--ST_AsGML — retorna a representação GML de um objeto espacial.
--ST_AsKML — retorna a representação KML de um objeto espacial.
--ST_AsBinary — retorna a representação WKB (na forma de bytea) de um objeto espacial.
--ST_AsEWKB — retorna a representação EWKB (na forma de bytea) de um objeto espacial.

--Exemplo:

SELECT geom, st_astext(geom) AS WKT,
	st_asEWKT(geom) AS EWKT, st_asGeoJSON(geom) AS GEOJSON, st_asGML(geom) AS GML, 
	encode(st_asbinary(geom), 'hex') AS WKB, encode(st_asbinary(geom, 'xdr'), 'hex') AS WKB_BIG_ENDIAN,
	encode(st_asEWKB(geom), 'hex') AS EWKB, encode(st_asEWKB(geom, 'xdr'), 'hex') AS EWKB_BIG_ENDIAN
FROM geometrias;

--notas sobre KML: é obrigatório um SRID e não suporta GEOMETRYCOLLECTION
SELECT geom, st_asKML(st_setSRID(geom, 4326)) AS KML
FROM geometrias
WHERE geometrytype(geom) <> 'GEOMETRYCOLLECTION';

--exemplo de conversão entre representações diferentes
SELECT st_asgml(st_geomfromgeojson('{"type":"Point","coordinates":[30,10]}'));

--inserindo dados com representações diferentes
INSERT INTO geometrias(nome, geom) VALUES ('uma região/polígono simples', st_geomfromgeojson('{"type":"Polygon","coordinates":[[[30,10],[40,40],[20,40],[10,20],[30,10]]]}'));

-- Exemplos de consultas SQL retornando objetos espaciais em determinadas representações

-- Retorne a representação WKT de todas as cidades de Santa Catarina
SELECT st_astext(geom), nm_mun 
FROM br_municipios_2019
WHERE sigla_uf = 'SC';

-- Retorne a representação GeoJSON de todos os pontos que indicam a localização de torres de energia
SELECT st_asGeoJSON(way)
FROM planet_osm_point
WHERE power = 'tower';
--veja os limites das coordenadas do SRID 3857 em https://epsg.io/3857 
--(para outros SRIDs, basta trocar o número final) - https://epsg.io/4326, https://epsg.io/4674

-- Retorne a representação EWKT das linhas que indivam pistas de corridas
SELECT st_asEWKT(way)
FROM planet_osm_line
WHERE highways = 'raceway';
